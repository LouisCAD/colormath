{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Colormath \u00b6 Colormath is a Kotlin Multiplatform library for color manipulation and conversion. Colormath can: Convert between color models and spaces Manipulate colors with transformations such as mixing and chromatic adaptation Calculate attributes such as WCAG contrast and perceptual color difference Generate gradients with custom interpolation methods and easing functions Parse and render colors as strings, including all representations from the CSS spec // Create an sRGB color val color = RGB ( \"#ff23cc\" ) // Interpolate with another color val mixed = color . interpolate ( RGB ( 0.1 , 0.4 , 1 ), 0.5f ) // RGB(\"#8c45e6\") // Convert to a different color space val lab = mixed . toLAB () // LAB(46.3, 60.9, -70) // Change the transparency val labA = lab . copy ( alpha = 0.25f ) // LAB(46.3, 60.9, -70, 0.25) // Adapt white point val lab50 = labA . convertTo ( LAB50 ) // LAB50(45, 55.1812, 72.5911, 0.25) // Render as a css color string println ( lab50 . formatCssString ()) // \"lab(45% 55.1812 -72.5911 / 0.25)\" Installation \u00b6 Colormath is distributed through Maven Central . dependencies { implementation ( \"com.github.ajalt.colormath:colormath:3.1.0\" ) // optional extensions for interop with other platforms // // android.graphics.Color implementation ( \"com.github.ajalt.colormath.extensions:colormath-ext-android-color:3.1.0\" ) // androidx.annotation.ColorInt implementation ( \"com.github.ajalt.colormath.extensions:colormath-ext-android-colorint:3.1.0\" ) // androidx.compose.ui.graphics.Color implementation ( \"com.github.ajalt.colormath.extensions:colormath-ext-jetpack-compose:3.1.0\" ) } If you\u2019re using Maven instead of Gradle, use <artifactId>colormath-jvm</artifactId> \u00b6 Multiplatform \u00b6 Colormath supports the following targets: jvm , mingwX64 , linuxX64 , macosX64 , ios , watchos , tvos , and js (for both NodeJS and Browsers). You\u2019ll need to use Gradle 6 or newer. Artifacts for macosArm64 are also published, but not tested with CI. Snapshots \u00b6 Snapshot builds are also available You'll need to add the Sonatype snapshots repository: repositories { maven { url = uri ( \"https://oss.sonatype.org/content/repositories/snapshots/\" ) } }","title":"Getting Started"},{"location":"#colormath","text":"Colormath is a Kotlin Multiplatform library for color manipulation and conversion. Colormath can: Convert between color models and spaces Manipulate colors with transformations such as mixing and chromatic adaptation Calculate attributes such as WCAG contrast and perceptual color difference Generate gradients with custom interpolation methods and easing functions Parse and render colors as strings, including all representations from the CSS spec // Create an sRGB color val color = RGB ( \"#ff23cc\" ) // Interpolate with another color val mixed = color . interpolate ( RGB ( 0.1 , 0.4 , 1 ), 0.5f ) // RGB(\"#8c45e6\") // Convert to a different color space val lab = mixed . toLAB () // LAB(46.3, 60.9, -70) // Change the transparency val labA = lab . copy ( alpha = 0.25f ) // LAB(46.3, 60.9, -70, 0.25) // Adapt white point val lab50 = labA . convertTo ( LAB50 ) // LAB50(45, 55.1812, 72.5911, 0.25) // Render as a css color string println ( lab50 . formatCssString ()) // \"lab(45% 55.1812 -72.5911 / 0.25)\"","title":"Colormath"},{"location":"#installation","text":"Colormath is distributed through Maven Central . dependencies { implementation ( \"com.github.ajalt.colormath:colormath:3.1.0\" ) // optional extensions for interop with other platforms // // android.graphics.Color implementation ( \"com.github.ajalt.colormath.extensions:colormath-ext-android-color:3.1.0\" ) // androidx.annotation.ColorInt implementation ( \"com.github.ajalt.colormath.extensions:colormath-ext-android-colorint:3.1.0\" ) // androidx.compose.ui.graphics.Color implementation ( \"com.github.ajalt.colormath.extensions:colormath-ext-jetpack-compose:3.1.0\" ) }","title":"Installation"},{"location":"#if-youre-using-maven-instead-of-gradle-use-artifactidcolormath-jvmartifactid","text":"","title":"If you're using Maven instead of Gradle, use &lt;artifactId&gt;colormath-jvm&lt;/artifactId&gt;"},{"location":"#multiplatform","text":"Colormath supports the following targets: jvm , mingwX64 , linuxX64 , macosX64 , ios , watchos , tvos , and js (for both NodeJS and Browsers). You\u2019ll need to use Gradle 6 or newer. Artifacts for macosArm64 are also published, but not tested with CI.","title":"Multiplatform"},{"location":"#snapshots","text":"Snapshot builds are also available You'll need to add the Sonatype snapshots repository: repositories { maven { url = uri ( \"https://oss.sonatype.org/content/repositories/snapshots/\" ) } }","title":"Snapshots"},{"location":"changelog/","text":"[3.1.0] - 2021-09-24 \u00b6 Added \u00b6 Optional modules with extensions for converting between Colormath colors and other platform representations. Changed \u00b6 Unspecified alpha values now default to fully opaque [3.0.0] - 2021-09-10 \u00b6 Added \u00b6 New color models: Oklab , Oklch , HWB , HPLuv , HSLuv , LCHab , LCHuv , JzAzBz , JzCzHz , ICtCp New RGB color spaces: Linear sRGB , ACES , ACEScc , ACEScct , ACEScg , Adobe RGB , BT.2020 , BT.709 , DCI P3 , Display P3 , ProPhoto Other color spaces: LABColorSpace , LCHabColorSpace , LCHuvColorSpace , LUVColorSpace , XYZColorSpace WCAG contrast: wcagLuminance , wcagContrastRatio , mostContrasting , firstWithContrast Color difference: euclideanDistance , differenceCIE76 , differenceCIE94 , differenceCIE2000 , differenceCMC , differenceEz Transforms: Color.map , mix , multiplyAlpha , divideAlpha , createChromaticAdapter , RGBColorSpace.converterTo Interpolation: Color.interpolate , ColorSpace.interpolator Color metadata: ColorSpace , Color.space , Color.toArray , ColorSpace.create CSS parsing and rendering now support all CSS color strings RGBInt : an inline class that stores RGB colors packed in a single Int. Create instances directly, or convert to it with RGB.toRGBInt() Publish macosArm64 target. Changed \u00b6 All Color classes now store their color components as Float RGB , XYZ , HSV , HSL , and HWB now store their rectangular components normalized to [0, 1]`. Renamed Color.fromCss to Color.parse . All Color constructors now use alpha as name of their final parameter. Replace toCssRgb and toCssHsl with fromatCssString that supports all color models. All color models moved from the package com.github.ajalt.colormath to com.github.ajalt.colormath.model Updated Kotlin to 1.5.30 Removed \u00b6 Removed the previously deprecated ConvertibleColor typealias. Removed the CssColors object. Use Color.fromCss instead. Removed Ansi16 companion object color constants. Removed Color.toHex() . Use RGB.toHex() instead. [2.1.0] - 2021-05-05 \u00b6 Added \u00b6 Added CIE LUV colorspace support Added CIE LCH(uv) colorspace support Added HWB colorspace support Added lab() and hwb() support to Color.fromCss JS target now publishes IR format in addition to legacy jars Changed \u00b6 Updated Kotlin to 1.5.0 Color.fromCss now clamps out-of-range values in accordance with the CSS Color Module Level 4 spec [2.0.0] - 2020-09-12 \u00b6 Added \u00b6 Added multiplatform support. Changed \u00b6 Moved maven coordinates to com.github.ajalt.colormath:colormath:2.0.0 . Deprecated \u00b6 Renamed ConvertibleColor to Color . The old name is left as a deprecated type alias. [1.4.1] - 2020-05-12 \u00b6 Fixed \u00b6 Fix RGB(255,255, 255).toLAB() throwing an exception due to rounding precision. [1.4.0] - 2019-12-22 \u00b6 Added \u00b6 hueAsRad() , hueAsGrad() , and hueAsTurns() extensions for HSL and HSV classes. toHex() now has a renderAlpha parameter that lets you render the color\u2019s alpha channel in the hex. By default the alpha will be added if it\u2019s < 1. toCssRgb() and toCssHsl() extensions to render colors as CSS color functions RGB.toPackedInt() to convert a color to a single integer. Changed \u00b6 withNumberSign parameter of toHex now defaults to true ColorMath.parseCssColor() renamed to ConvertableColor.fromCss() and ColorMath.cssKeywordColors to CssColors.colorsByName [1.3.0] - 2019-12-19 \u00b6 Added \u00b6 All colors now have an alpha channel, defaulting to 1 (fully opaque). For colorspaces that support transparency, you can pass an alpha value into their constructors. ColorMath.parseCssColor() can parse all valid HTML/CSS colors, including rgb, hsl, and named colors. ColorMath.cssKeywordColors is a map of HTML/CSS color names to RGB the colors they represent. Changed \u00b6 Switch rounding methods to use kotlin.math rounding, which can slightly change conversion results in some cases. [1.2.0] - 2018-08-19 \u00b6 Added \u00b6 Add ability to construct RGB instances from packed integers or Bytes","title":"Releases"},{"location":"changelog/#310-2021-09-24","text":"","title":"[3.1.0] - 2021-09-24"},{"location":"changelog/#added","text":"Optional modules with extensions for converting between Colormath colors and other platform representations.","title":"Added"},{"location":"changelog/#changed","text":"Unspecified alpha values now default to fully opaque","title":"Changed"},{"location":"changelog/#300-2021-09-10","text":"","title":"[3.0.0] - 2021-09-10"},{"location":"changelog/#added_1","text":"New color models: Oklab , Oklch , HWB , HPLuv , HSLuv , LCHab , LCHuv , JzAzBz , JzCzHz , ICtCp New RGB color spaces: Linear sRGB , ACES , ACEScc , ACEScct , ACEScg , Adobe RGB , BT.2020 , BT.709 , DCI P3 , Display P3 , ProPhoto Other color spaces: LABColorSpace , LCHabColorSpace , LCHuvColorSpace , LUVColorSpace , XYZColorSpace WCAG contrast: wcagLuminance , wcagContrastRatio , mostContrasting , firstWithContrast Color difference: euclideanDistance , differenceCIE76 , differenceCIE94 , differenceCIE2000 , differenceCMC , differenceEz Transforms: Color.map , mix , multiplyAlpha , divideAlpha , createChromaticAdapter , RGBColorSpace.converterTo Interpolation: Color.interpolate , ColorSpace.interpolator Color metadata: ColorSpace , Color.space , Color.toArray , ColorSpace.create CSS parsing and rendering now support all CSS color strings RGBInt : an inline class that stores RGB colors packed in a single Int. Create instances directly, or convert to it with RGB.toRGBInt() Publish macosArm64 target.","title":"Added"},{"location":"changelog/#changed_1","text":"All Color classes now store their color components as Float RGB , XYZ , HSV , HSL , and HWB now store their rectangular components normalized to [0, 1]`. Renamed Color.fromCss to Color.parse . All Color constructors now use alpha as name of their final parameter. Replace toCssRgb and toCssHsl with fromatCssString that supports all color models. All color models moved from the package com.github.ajalt.colormath to com.github.ajalt.colormath.model Updated Kotlin to 1.5.30","title":"Changed"},{"location":"changelog/#removed","text":"Removed the previously deprecated ConvertibleColor typealias. Removed the CssColors object. Use Color.fromCss instead. Removed Ansi16 companion object color constants. Removed Color.toHex() . Use RGB.toHex() instead.","title":"Removed"},{"location":"changelog/#210-2021-05-05","text":"","title":"[2.1.0] - 2021-05-05"},{"location":"changelog/#added_2","text":"Added CIE LUV colorspace support Added CIE LCH(uv) colorspace support Added HWB colorspace support Added lab() and hwb() support to Color.fromCss JS target now publishes IR format in addition to legacy jars","title":"Added"},{"location":"changelog/#changed_2","text":"Updated Kotlin to 1.5.0 Color.fromCss now clamps out-of-range values in accordance with the CSS Color Module Level 4 spec","title":"Changed"},{"location":"changelog/#200-2020-09-12","text":"","title":"[2.0.0] - 2020-09-12"},{"location":"changelog/#added_3","text":"Added multiplatform support.","title":"Added"},{"location":"changelog/#changed_3","text":"Moved maven coordinates to com.github.ajalt.colormath:colormath:2.0.0 .","title":"Changed"},{"location":"changelog/#deprecated","text":"Renamed ConvertibleColor to Color . The old name is left as a deprecated type alias.","title":"Deprecated"},{"location":"changelog/#141-2020-05-12","text":"","title":"[1.4.1] - 2020-05-12"},{"location":"changelog/#fixed","text":"Fix RGB(255,255, 255).toLAB() throwing an exception due to rounding precision.","title":"Fixed"},{"location":"changelog/#140-2019-12-22","text":"","title":"[1.4.0] - 2019-12-22"},{"location":"changelog/#added_4","text":"hueAsRad() , hueAsGrad() , and hueAsTurns() extensions for HSL and HSV classes. toHex() now has a renderAlpha parameter that lets you render the color\u2019s alpha channel in the hex. By default the alpha will be added if it\u2019s < 1. toCssRgb() and toCssHsl() extensions to render colors as CSS color functions RGB.toPackedInt() to convert a color to a single integer.","title":"Added"},{"location":"changelog/#changed_4","text":"withNumberSign parameter of toHex now defaults to true ColorMath.parseCssColor() renamed to ConvertableColor.fromCss() and ColorMath.cssKeywordColors to CssColors.colorsByName","title":"Changed"},{"location":"changelog/#130-2019-12-19","text":"","title":"[1.3.0] - 2019-12-19"},{"location":"changelog/#added_5","text":"All colors now have an alpha channel, defaulting to 1 (fully opaque). For colorspaces that support transparency, you can pass an alpha value into their constructors. ColorMath.parseCssColor() can parse all valid HTML/CSS colors, including rgb, hsl, and named colors. ColorMath.cssKeywordColors is a map of HTML/CSS color names to RGB the colors they represent.","title":"Added"},{"location":"changelog/#changed_5","text":"Switch rounding methods to use kotlin.math rounding, which can slightly change conversion results in some cases.","title":"Changed"},{"location":"changelog/#120-2018-08-19","text":"","title":"[1.2.0] - 2018-08-19"},{"location":"changelog/#added_6","text":"Add ability to construct RGB instances from packed integers or Bytes","title":"Added"},{"location":"colorspaces/","text":"Color Spaces \u00b6 Colormath has a number of built-in color spaces and models. A note on terminology A color model defines the components of a color. For example, RGB is a color model that defines colors with the additive combination of red, green, and blue light. A color space is a color model plus the details necessary to represent a color in that model. sRGB and DCI P3 are both color spaces the use the RGB model, but they define different values for the exact colors of their RGB primaries. Built-in color models \u00b6 RGB \u00b6 RGB Component Description Range r red [0, 1] g green [0, 1] b blue [0, 1] The RGB color model defines colors with the additive combination of reg, green, and blue lights. RGB components are stored as floating point numbers in the range [0, 1] . You can also represent sRGB colors as packed integers with RGBInt , or create them from integers in the range [0, 255] with RGB.from255() . RGB color spaces \u00b6 Colormath includes a number of built-in RGB color spaces, and you can define your own with RGBColorSpace . The default RGB space is sRGB. sRGB Linear sRGB ACES ACEScc ACEScct ACEScg Adobe RGB BT.2020 / REC.2020 BT.709 / REC.709 DCI P3 Display P3 ROMM RGB / ProPhoto RGB HSL \u00b6 HSL Component Description Range h hue, degrees, NaN for monochrome colors [0, 360) s saturation [0, 1] l lightness [0, 1] A cylindrical representation of sRGB using Hue, Saturation, and Lightness. HSV \u00b6 HSV Component Description Range h hue, degrees, NaN for monochrome colors [0, 360) s saturation [0, 1] v value [0, 1] A cylindrical representation of sRGB using Hue, Saturation, and Value / brightness. HWB \u00b6 HWB Component Description Range h hue, degrees [0, 360) w whiteness [0, 1] b blackness [0, 1] A cylindrical representation of sRGB using Hue, Whiteness, and Blackness. HSLuv and HPLuv \u00b6 HSLuv Component Description Range h hue, degrees, NaN for monochrome colors [0, 360) s saturation [0, 100] l lightness [0, 100] HPLuv Component Description Range h hue, degrees, NaN for monochrome colors [0, 360) p percentage saturation [0, 100] l lightness [0, 100] HSLuv and HPLuv are color spaces designed as a human friendly alternative to HSL. IC t C p \u00b6 ICtCp Component Description Range I intensity [0, 1] C t Tritan (blue-yellow) [-0.5, 0.5] C p Protan (red-green) [-0.5, 0.5] IC t C p is a color space designed for high dynamic range and wide color gamut imagery. J z A z B z and J z C z H z \u00b6 JzAzBz Component Description Range J z lightness [0, 1] A z green-red [-1, 1] B z blue-yellow [-1, 1] JzCzHz Component Description Range J z lightness [0, 1] C z chroma [-1, 1] H z hue, degrees, NaN for monochrome colors [0, 360) J z A z B z is a perceptually uniform space where euclidean distance predicts perceptual difference. J z C z H z is its cylindrical representation. CIE L*a*b* and LCH ab \u00b6 LAB Component Description Range L lightness [0, 100] a* green-red [-100, 100] b* blue-yellow [-100, 100] LCHab Component Description Range L lightness [0, 100] c chroma [0, 100] h hue, degrees, NaN for monochrome colors [0, 360) LAB is a color model intended to be perceptually uniform. Its cylindrical representation is LCH ab . LAB and LCHab color spaces \u00b6 LABColorSpaces LCHabColorSpaces LAB and LCHab models each have multiple color spaces that are defined relative to a white point. The default white point is D65. CIE L*u*v* and LCH uv \u00b6 LUV Component Description Range L lightness [0, 100] u [-100, 100] v [-100, 100] LCHuv Component Description Range L lightness [0, 100] c chroma [0, 100] h hue, degrees, NaN for monochrome colors [0, 360) LUV is a color model intended to be perceptually uniform. Its cylindrical representation is LCH uv . LUV and LCHuv color spaces \u00b6 LUVColorSpaces LCHuvColorSpaces LUV and LCHuv models each have multiple color spaces that are defined relative to a white point. The default white point is D65. Oklab and Oklch \u00b6 Oklab Component Description Range L lightness [0, 1] a green-red [-1, 1] b blue-yellow [-1, 1] Oklch Component Description Range L lightness [0, 1] c chroma [0, 1] h hue, degrees, NaN for monochrome colors [0, 360) Oklab is a perceptual color space for image processing. Its cylindrical representation is Oklch. CIE XYZ \u00b6 XYZ Component Range X [0, 1] Y [0, 1] Z [0, 1] The XYZ color model is common used as a profile connection space when converting between other models. XYZ color spaces \u00b6 XYZColorSpaces The XYZ model has multiple color spaces that are defined relative to a white point. The default white point is D65. ANSI color codes \u00b6 ANSI16 ANSI256 Based on the VGA color palette, there are models for 4-bit, 16 color codes and 8-bit, 256 color codes CMYK \u00b6 CMYK Component Description Range c cyan [0, 1] m magenta [0, 1] y yellow [0, 1] k key / black [0, 1] Colormath\u2019s CMYK model uses device-independent conversions. Device CMYK profiles are not currently supported.","title":"Color Spaces"},{"location":"colorspaces/#color-spaces","text":"Colormath has a number of built-in color spaces and models. A note on terminology A color model defines the components of a color. For example, RGB is a color model that defines colors with the additive combination of red, green, and blue light. A color space is a color model plus the details necessary to represent a color in that model. sRGB and DCI P3 are both color spaces the use the RGB model, but they define different values for the exact colors of their RGB primaries.","title":"Color Spaces"},{"location":"colorspaces/#built-in-color-models","text":"","title":"Built-in color models"},{"location":"colorspaces/#rgb","text":"RGB Component Description Range r red [0, 1] g green [0, 1] b blue [0, 1] The RGB color model defines colors with the additive combination of reg, green, and blue lights. RGB components are stored as floating point numbers in the range [0, 1] . You can also represent sRGB colors as packed integers with RGBInt , or create them from integers in the range [0, 255] with RGB.from255() .","title":"RGB"},{"location":"colorspaces/#rgb-color-spaces","text":"Colormath includes a number of built-in RGB color spaces, and you can define your own with RGBColorSpace . The default RGB space is sRGB. sRGB Linear sRGB ACES ACEScc ACEScct ACEScg Adobe RGB BT.2020 / REC.2020 BT.709 / REC.709 DCI P3 Display P3 ROMM RGB / ProPhoto RGB","title":"RGB color spaces"},{"location":"colorspaces/#hsl","text":"HSL Component Description Range h hue, degrees, NaN for monochrome colors [0, 360) s saturation [0, 1] l lightness [0, 1] A cylindrical representation of sRGB using Hue, Saturation, and Lightness.","title":"HSL"},{"location":"colorspaces/#hsv","text":"HSV Component Description Range h hue, degrees, NaN for monochrome colors [0, 360) s saturation [0, 1] v value [0, 1] A cylindrical representation of sRGB using Hue, Saturation, and Value / brightness.","title":"HSV"},{"location":"colorspaces/#hwb","text":"HWB Component Description Range h hue, degrees [0, 360) w whiteness [0, 1] b blackness [0, 1] A cylindrical representation of sRGB using Hue, Whiteness, and Blackness.","title":"HWB"},{"location":"colorspaces/#hsluv-and-hpluv","text":"HSLuv Component Description Range h hue, degrees, NaN for monochrome colors [0, 360) s saturation [0, 100] l lightness [0, 100] HPLuv Component Description Range h hue, degrees, NaN for monochrome colors [0, 360) p percentage saturation [0, 100] l lightness [0, 100] HSLuv and HPLuv are color spaces designed as a human friendly alternative to HSL.","title":"HSLuv and HPLuv"},{"location":"colorspaces/#ictcp","text":"ICtCp Component Description Range I intensity [0, 1] C t Tritan (blue-yellow) [-0.5, 0.5] C p Protan (red-green) [-0.5, 0.5] IC t C p is a color space designed for high dynamic range and wide color gamut imagery.","title":"ICtCp"},{"location":"colorspaces/#jzazbz-and-jzczhz","text":"JzAzBz Component Description Range J z lightness [0, 1] A z green-red [-1, 1] B z blue-yellow [-1, 1] JzCzHz Component Description Range J z lightness [0, 1] C z chroma [-1, 1] H z hue, degrees, NaN for monochrome colors [0, 360) J z A z B z is a perceptually uniform space where euclidean distance predicts perceptual difference. J z C z H z is its cylindrical representation.","title":"JzAzBz and JzCzHz"},{"location":"colorspaces/#cie-lab-and-lchab","text":"LAB Component Description Range L lightness [0, 100] a* green-red [-100, 100] b* blue-yellow [-100, 100] LCHab Component Description Range L lightness [0, 100] c chroma [0, 100] h hue, degrees, NaN for monochrome colors [0, 360) LAB is a color model intended to be perceptually uniform. Its cylindrical representation is LCH ab .","title":"CIE L*a*b* and LCHab"},{"location":"colorspaces/#lab-and-lchab-color-spaces","text":"LABColorSpaces LCHabColorSpaces LAB and LCHab models each have multiple color spaces that are defined relative to a white point. The default white point is D65.","title":"LAB and LCHab color spaces"},{"location":"colorspaces/#cie-luv-and-lchuv","text":"LUV Component Description Range L lightness [0, 100] u [-100, 100] v [-100, 100] LCHuv Component Description Range L lightness [0, 100] c chroma [0, 100] h hue, degrees, NaN for monochrome colors [0, 360) LUV is a color model intended to be perceptually uniform. Its cylindrical representation is LCH uv .","title":"CIE L*u*v* and LCHuv"},{"location":"colorspaces/#luv-and-lchuv-color-spaces","text":"LUVColorSpaces LCHuvColorSpaces LUV and LCHuv models each have multiple color spaces that are defined relative to a white point. The default white point is D65.","title":"LUV and LCHuv color spaces"},{"location":"colorspaces/#oklab-and-oklch","text":"Oklab Component Description Range L lightness [0, 1] a green-red [-1, 1] b blue-yellow [-1, 1] Oklch Component Description Range L lightness [0, 1] c chroma [0, 1] h hue, degrees, NaN for monochrome colors [0, 360) Oklab is a perceptual color space for image processing. Its cylindrical representation is Oklch.","title":"Oklab and Oklch"},{"location":"colorspaces/#cie-xyz","text":"XYZ Component Range X [0, 1] Y [0, 1] Z [0, 1] The XYZ color model is common used as a profile connection space when converting between other models.","title":"CIE XYZ"},{"location":"colorspaces/#xyz-color-spaces","text":"XYZColorSpaces The XYZ model has multiple color spaces that are defined relative to a white point. The default white point is D65.","title":"XYZ color spaces"},{"location":"colorspaces/#ansi-color-codes","text":"ANSI16 ANSI256 Based on the VGA color palette, there are models for 4-bit, 16 color codes and 8-bit, 256 color codes","title":"ANSI color codes"},{"location":"colorspaces/#cmyk","text":"CMYK Component Description Range c cyan [0, 1] m magenta [0, 1] y yellow [0, 1] k key / black [0, 1] Colormath\u2019s CMYK model uses device-independent conversions. Device CMYK profiles are not currently supported.","title":"CMYK"},{"location":"converter/","text":"Color Converter \u00b6","title":"Color converter"},{"location":"converter/#color-converter","text":"","title":"Color Converter"},{"location":"extensions/","text":"Colormath extensions \u00b6 Colormath provides extensions for converting to and from other platform\u2019s color representations. Each set of extensions is published as a separate maven package. Android ColorInt \u00b6 dependencies { implementation ( \"com.github.ajalt.colormath.extensions:colormath-ext-android-colorint: $ colormathVersion \" ) } API docs These extensions convert between Android\u2019s packed ARGB integers, which are commonly annotated with @ColorInt . This package supports Android API 16+. val redPercent = RGBInt . fromColorInt ( textView . currentTextColor ). redFloat val textColor = RGB . fromColorInt ( textView . currentTextColor ) textView . highlightColor = textColor . toColorInt () Android Color objects \u00b6 dependencies { implementation ( \"com.github.ajalt.colormath.extensions:colormath-ext-android-color: $ colormathVersion \" ) } API docs These extensions convert between the color objects introduced in Android 26. This package supports Android API 26+. import android.graphics.ColorSpace import android.graphics.Color as AndroidColor val c : AndroidColor = RGB ( \"#f0f\" ). toAndroidColor () val rgb : RGB = c . toColormathSRGB () val lab = AndroidColor . valueOf ( 0f , 1f , 0f , 1f , ColorSpace . get ( ColorSpace . Named . CIE_LAB )). toColormathColor () Jetpack Compose Color objects \u00b6 dependencies { implementation ( \"com.github.ajalt.colormath.extensions:colormath-ext-jetpack-compose: $ colormathVersion \" ) } API docs These extensions convert between the color objects used in androidx.compose . This package supports Android API 21+.","title":"Extensions"},{"location":"extensions/#colormath-extensions","text":"Colormath provides extensions for converting to and from other platform\u2019s color representations. Each set of extensions is published as a separate maven package.","title":"Colormath extensions"},{"location":"extensions/#android-colorint","text":"dependencies { implementation ( \"com.github.ajalt.colormath.extensions:colormath-ext-android-colorint: $ colormathVersion \" ) } API docs These extensions convert between Android\u2019s packed ARGB integers, which are commonly annotated with @ColorInt . This package supports Android API 16+. val redPercent = RGBInt . fromColorInt ( textView . currentTextColor ). redFloat val textColor = RGB . fromColorInt ( textView . currentTextColor ) textView . highlightColor = textColor . toColorInt ()","title":"Android ColorInt"},{"location":"extensions/#android-color-objects","text":"dependencies { implementation ( \"com.github.ajalt.colormath.extensions:colormath-ext-android-color: $ colormathVersion \" ) } API docs These extensions convert between the color objects introduced in Android 26. This package supports Android API 26+. import android.graphics.ColorSpace import android.graphics.Color as AndroidColor val c : AndroidColor = RGB ( \"#f0f\" ). toAndroidColor () val rgb : RGB = c . toColormathSRGB () val lab = AndroidColor . valueOf ( 0f , 1f , 0f , 1f , ColorSpace . get ( ColorSpace . Named . CIE_LAB )). toColormathColor ()","title":"Android Color objects"},{"location":"extensions/#jetpack-compose-color-objects","text":"dependencies { implementation ( \"com.github.ajalt.colormath.extensions:colormath-ext-jetpack-compose: $ colormathVersion \" ) } API docs These extensions convert between the color objects used in androidx.compose . This package supports Android API 21+.","title":"Jetpack Compose Color objects"},{"location":"gradient/","text":"Gradients \u00b6 The choice of color space is important when generating gradients. Try out some different colors to see how various color spaces interpolate between them.","title":"Gradient generator"},{"location":"gradient/#gradients","text":"The choice of color space is important when generating gradients. Try out some different colors to see how various color spaces interpolate between them.","title":"Gradients"},{"location":"usage/","text":"Usage \u00b6 Creating colors \u00b6 Instances of a color are constructed by invoking their color model. LAB ( 50 , 75 , 100 ) For models with multiple color spaces, you can also invoke the specific color space, or create your own: LAB50 ( 50 , 75 , 100 ) // Uses the D50 illuminant val LAB55 = LabColorSpace ( Illuminant . D55 ) LAB55 ( 10 , 20 , 30 ) You can optionally specify an alpha value. LAB ( l = 0 , a = 0 , b = 0 , alpha = 0.5 ) If you don\u2019t specify an alpha value, it will default to 1, meaning fully opaque. sRGB colors can also be constructed from hex strings or integers. All of the following are equivalent: RGB ( 0.2 , 0.4 , 0.6 ) SRGB ( 0.2 , 0.4 , 0.6 ) RGB . from255 ( 51 , 102 , 153 ) RGB ( \"#369\" ) RGB ( \"#336699\" ) RGBInt ( 0 x336699u ). toSRGB () You can find the full list of built-in color spaces here . Converting colors \u00b6 You can convert a color to another color space with any of the Color.to*() functions: RGB ( \"#111\" ). toHSL () XYZ (. 1 , . 2 , . 3 ). toOklab () You can also convert to a specific color space with convertTo : RGB ( \"#111\" ). convertTo ( LinearSRGB ) RGB ( \"#222\" ). convertTo ( LAB ) RGB ( \"#333\" ). convertTo ( LAB50 ) If you need to convert multiple colors from one RGB color space to another, you can use an RGBToRGBConverter , which is more efficient than using convertTo multiple times: val srgbColors : List < RGB > = listOf ( /*...*/ ) val converter = SRGB . converterTo ( ACES ) val acesColors = srgbColors . map { converter . convert ( it ) } When converting to polar spaces like HSL , the hue is undefined for grayscale colors. When that\u2019s the case, the hue value will be NaN . Color transforms \u00b6 You can create generic transforms for colors with Color.map . Colormath includes several built-in transforms. Mix \u00b6 Mix two colors based on a fraction of each, with a syntax that\u2019s similar to the CSS color-mix function. val purple = LCHab ( 29 , 66 , 327 ) val plum = LCHab ( 73 , 37 , 324 ) val mixed = LCHab . mix ( purple , . 8 , plum , . 3 ) Note If the amount of the two colors adds up to less than one, the resulting mix will be partially transparent. Interpolate \u00b6 You can also interpolate between two colors. This is similar to mix , but takes a single parameter t indicating the amount to interpolate between the two colors, with t=0 returning the first color, and t=1 returning the second. val color1 = RGB ( \"#000\" ) val color2 = RGB ( \"#444\" ) color1 . interpolate ( color2 , t = 0.25 ) // RGB(\"#111\") Premultiply alpha \u00b6 Colormath colors aren\u2019t normally stored with alpha premultiplied. You can do so with multiplyAlpha , and revert the operation with divideAlpha . val color = RGB ( 1 , 1 , 1 , alpha = 0.25 ) color . multiplyAlpha () // RGB(0.25, 0.25, 0.25, alpha=0.25) Color calculations \u00b6 Color gamut \u00b6 You can check if a color is within the sRGB gamut with isInSRGBGamut . XYZ (. 5 , . 7 , 1 ). isInSRGBGamut () // true ICtCp ( 0 , . 5 , . 5 ). isInSRGBGamut () // false Color contrast \u00b6 You can calculate the relative luminance of a color, or the contrast between two colors according to the Web Content Accessibility Guidelines . RGB ( \"#f3a\" ). wcagLuminance () // 0.26529932 RGB ( \"#aaa\" ). wcagContrastRatio ( RGB ( \"#fff\" )) // 2.323123 You can also select the most contrasting color from a list of colors, similar to the CSS color-contrast function. val wheat = RGB ( \"#f5deb3\" ) val tan = RGB ( \"#d2b48c\" ) val sienna = RGB ( \"#a0522d\" ) val accent = RGB ( \"#b22222\" ) wheat . mostContrasting ( tan , sienna , accent ) // returns accent In addition to mostContrasting , you can use firstWithContrast or firstWithContrastOrNull , depending on your use case. Color difference \u00b6 Colormath includes several formulas for computing the relative perceptual difference between two colors. euclideanDistance differenceCIE76 differenceCIE94 differenceCIE2000 differenceCMC differenceEz Gradients and Interpolation \u00b6 For gradients and advanced interpolation, you can use the interpolator builder. // You can interpolate in any color space. val interp = Oklab . interpolator { // Color stops can be specified in a different space than the interpolator stop ( RGB ( \"#00f\" )) stop ( RGB ( \"#fff\" )) stop ( RGB ( \"#000\" )) } // Get a single color interp . interpolate ( 0.25 ) // Or a sequence of colors to draw a gradient for (( x , color ) in interp . sequence ( canvas . width ). withIndex ()) { canvas . drawRect ( x = x , y = 0 , w = 1 , h = canvas . height , color ) } Interpolation method \u00b6 Interpolators use linear interpolation by default. Colormath also includes an implementation of monotone spline interpolation, which produces smoother gradients. LCHab . interpolator { method = InterpolationMethods . monotoneSpline () // ... } Easing functions \u00b6 Where the interpolation method changes the path the gradient takes through a color space, an easing function changes the speed that the path is traversed. EasingFunctions includes all the CSS easing functions, as well as an easing function to set the midpoint of the gradient between two stops. LCHab . interpolator { // Set the easing function for all components easing = EasingFunctions . easeInOut () // Override the easing function for a specific component componentEasing ( \"h\" , EasingFunctions . linear ()) stop ( RGB ( \"#00f\" )) { // Override the easing function between this stop and the next easing = EasingFunctions . midpoint (. 25 ) } stop ( RGB ( \"#fff\" )) stop ( RGB ( \"#000\" )) } Component adjustment \u00b6 You can make adjustments to the values of a component prior to interpolation. The CSS standard calls this a \u201cfixup\u201d. Alpha adjustment \u00b6 By default, if any color stops have an alpha value specified, any other stop with an unspecified alpha will have their alphas set to 1. Hue adjustment \u00b6 When interpolating in a cylindrical space like LCH ab , there are multiple ways to interpolate the hue (do you travel clockwise or counterclockwise around the hue circle?). You can pick a strategy from HueAdjustments , which contains all the methods defined in the CSS standard. By default, HueAdjustments.shorter is used. LCHab . interpolator { // set the adjustment for the hue componentAdjustment ( \"h\" , HueAdjustments . longer ) // disable the default alpha adjustment componentAdjustment ( \"alpha\" ) { it } // ... } Chromatic adaptation \u00b6 When converting between color spaces that use different white points, the color is automatically adapted using Von Kries\u2019 method with the CIECAM02 CAT matrix. If you\u2019d like to perform chromatic adaptation using a different matrix (such as Bradford\u2019s), you can convert the color to XYZ and use adaptTo . val bradfords = floatArrayOf ( 0.8951f , 0.2664f , - 0.1614f , - 0.7502f , 1.7135f , 0.0367f , 0.0389f , - 0.0685f , 1.0296f , ) // adapt this color to LAB with a D50 whitepoint using bradford's matrix RGB ( \"#f3a\" ). toXYZ (). adaptTo ( XYZ50 , bradfords ). toLAB () // LAB50(l=59.029217, a=79.97541, b=-14.047905) If you want to adapt multiple colors at once based on a source white color, you can use createChromaticAdapter . val sourceWhite : Color = bitmap . getWhitestPixel () val adapter = RGBInt . createChromaticAdapter ( sourceWhite ) val pixels : IntArray = bitmap . getArgbPixels () adapter . adaptAll ( pixels ) bitmap . setPixels ( pixels ) Parsing color strings \u00b6 You can create a Color instance from any CSS color string using parse and parseOrNull . Color . parse ( \"red\" ) // RGB(r=1.0, g=0.0, b=0.0) Color . parse ( \"rgb(51 102 51 / 40%)\" ) // RGB(r=0.2, g=0.4, b=0.2, alpha=0.4) Color . parse ( \"hwb(200grad 20% 45%)\" ) // HWB(h=180.0, w=0.2, b=0.45) Rendering colors as strings \u00b6 You can also render any Color as a CSS color string with formatCssString . Colormath supports more color spaces than CSS, so formatting formatCssString will produce a color() style string with a dashed identifier name based on the color space. You can also use formatCssStringOrNull which will return null when called on a color space that isn\u2019t built in to CSS. To render a color as a hex string, convert it to sRGB and use toHex . RGB (. 2 , 0 , 1 , alpha = . 5 ). formatCssString () // \"rgb(51 0 255 / 0.5)\" LCHab50 ( 50 , 10 , 180 ). formatCssString () // \"lch(50% 10 180)\" ROMM_RGB (. 1 , . 2 , . 4 ). formatCssString () // \"color(prophoto-rgb 0.1 0.2 0.4)\" RGB (. 2 , . 4 , . 6 ). toHex () // \"#336699\" Caution The CSS lab , lch , and xyz functions specify colors with the D50 illuminant. Colormath\u2019s default constructors for those color spaces use D65 , so they will be subject to chromatic adaptation before rendering. To avoid this, use the D50 versions of the constructors: LAB50 , LCHab50 , and XYZ50","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#creating-colors","text":"Instances of a color are constructed by invoking their color model. LAB ( 50 , 75 , 100 ) For models with multiple color spaces, you can also invoke the specific color space, or create your own: LAB50 ( 50 , 75 , 100 ) // Uses the D50 illuminant val LAB55 = LabColorSpace ( Illuminant . D55 ) LAB55 ( 10 , 20 , 30 ) You can optionally specify an alpha value. LAB ( l = 0 , a = 0 , b = 0 , alpha = 0.5 ) If you don\u2019t specify an alpha value, it will default to 1, meaning fully opaque. sRGB colors can also be constructed from hex strings or integers. All of the following are equivalent: RGB ( 0.2 , 0.4 , 0.6 ) SRGB ( 0.2 , 0.4 , 0.6 ) RGB . from255 ( 51 , 102 , 153 ) RGB ( \"#369\" ) RGB ( \"#336699\" ) RGBInt ( 0 x336699u ). toSRGB () You can find the full list of built-in color spaces here .","title":"Creating colors"},{"location":"usage/#converting-colors","text":"You can convert a color to another color space with any of the Color.to*() functions: RGB ( \"#111\" ). toHSL () XYZ (. 1 , . 2 , . 3 ). toOklab () You can also convert to a specific color space with convertTo : RGB ( \"#111\" ). convertTo ( LinearSRGB ) RGB ( \"#222\" ). convertTo ( LAB ) RGB ( \"#333\" ). convertTo ( LAB50 ) If you need to convert multiple colors from one RGB color space to another, you can use an RGBToRGBConverter , which is more efficient than using convertTo multiple times: val srgbColors : List < RGB > = listOf ( /*...*/ ) val converter = SRGB . converterTo ( ACES ) val acesColors = srgbColors . map { converter . convert ( it ) } When converting to polar spaces like HSL , the hue is undefined for grayscale colors. When that\u2019s the case, the hue value will be NaN .","title":"Converting colors"},{"location":"usage/#color-transforms","text":"You can create generic transforms for colors with Color.map . Colormath includes several built-in transforms.","title":"Color transforms"},{"location":"usage/#mix","text":"Mix two colors based on a fraction of each, with a syntax that\u2019s similar to the CSS color-mix function. val purple = LCHab ( 29 , 66 , 327 ) val plum = LCHab ( 73 , 37 , 324 ) val mixed = LCHab . mix ( purple , . 8 , plum , . 3 ) Note If the amount of the two colors adds up to less than one, the resulting mix will be partially transparent.","title":"Mix"},{"location":"usage/#interpolate","text":"You can also interpolate between two colors. This is similar to mix , but takes a single parameter t indicating the amount to interpolate between the two colors, with t=0 returning the first color, and t=1 returning the second. val color1 = RGB ( \"#000\" ) val color2 = RGB ( \"#444\" ) color1 . interpolate ( color2 , t = 0.25 ) // RGB(\"#111\")","title":"Interpolate"},{"location":"usage/#premultiply-alpha","text":"Colormath colors aren\u2019t normally stored with alpha premultiplied. You can do so with multiplyAlpha , and revert the operation with divideAlpha . val color = RGB ( 1 , 1 , 1 , alpha = 0.25 ) color . multiplyAlpha () // RGB(0.25, 0.25, 0.25, alpha=0.25)","title":"Premultiply alpha"},{"location":"usage/#color-calculations","text":"","title":"Color calculations"},{"location":"usage/#color-gamut","text":"You can check if a color is within the sRGB gamut with isInSRGBGamut . XYZ (. 5 , . 7 , 1 ). isInSRGBGamut () // true ICtCp ( 0 , . 5 , . 5 ). isInSRGBGamut () // false","title":"Color gamut"},{"location":"usage/#color-contrast","text":"You can calculate the relative luminance of a color, or the contrast between two colors according to the Web Content Accessibility Guidelines . RGB ( \"#f3a\" ). wcagLuminance () // 0.26529932 RGB ( \"#aaa\" ). wcagContrastRatio ( RGB ( \"#fff\" )) // 2.323123 You can also select the most contrasting color from a list of colors, similar to the CSS color-contrast function. val wheat = RGB ( \"#f5deb3\" ) val tan = RGB ( \"#d2b48c\" ) val sienna = RGB ( \"#a0522d\" ) val accent = RGB ( \"#b22222\" ) wheat . mostContrasting ( tan , sienna , accent ) // returns accent In addition to mostContrasting , you can use firstWithContrast or firstWithContrastOrNull , depending on your use case.","title":"Color contrast"},{"location":"usage/#color-difference","text":"Colormath includes several formulas for computing the relative perceptual difference between two colors. euclideanDistance differenceCIE76 differenceCIE94 differenceCIE2000 differenceCMC differenceEz","title":"Color difference"},{"location":"usage/#gradients-and-interpolation","text":"For gradients and advanced interpolation, you can use the interpolator builder. // You can interpolate in any color space. val interp = Oklab . interpolator { // Color stops can be specified in a different space than the interpolator stop ( RGB ( \"#00f\" )) stop ( RGB ( \"#fff\" )) stop ( RGB ( \"#000\" )) } // Get a single color interp . interpolate ( 0.25 ) // Or a sequence of colors to draw a gradient for (( x , color ) in interp . sequence ( canvas . width ). withIndex ()) { canvas . drawRect ( x = x , y = 0 , w = 1 , h = canvas . height , color ) }","title":"Gradients and Interpolation"},{"location":"usage/#interpolation-method","text":"Interpolators use linear interpolation by default. Colormath also includes an implementation of monotone spline interpolation, which produces smoother gradients. LCHab . interpolator { method = InterpolationMethods . monotoneSpline () // ... }","title":"Interpolation method"},{"location":"usage/#easing-functions","text":"Where the interpolation method changes the path the gradient takes through a color space, an easing function changes the speed that the path is traversed. EasingFunctions includes all the CSS easing functions, as well as an easing function to set the midpoint of the gradient between two stops. LCHab . interpolator { // Set the easing function for all components easing = EasingFunctions . easeInOut () // Override the easing function for a specific component componentEasing ( \"h\" , EasingFunctions . linear ()) stop ( RGB ( \"#00f\" )) { // Override the easing function between this stop and the next easing = EasingFunctions . midpoint (. 25 ) } stop ( RGB ( \"#fff\" )) stop ( RGB ( \"#000\" )) }","title":"Easing functions"},{"location":"usage/#component-adjustment","text":"You can make adjustments to the values of a component prior to interpolation. The CSS standard calls this a \u201cfixup\u201d.","title":"Component adjustment"},{"location":"usage/#alpha-adjustment","text":"By default, if any color stops have an alpha value specified, any other stop with an unspecified alpha will have their alphas set to 1.","title":"Alpha adjustment"},{"location":"usage/#hue-adjustment","text":"When interpolating in a cylindrical space like LCH ab , there are multiple ways to interpolate the hue (do you travel clockwise or counterclockwise around the hue circle?). You can pick a strategy from HueAdjustments , which contains all the methods defined in the CSS standard. By default, HueAdjustments.shorter is used. LCHab . interpolator { // set the adjustment for the hue componentAdjustment ( \"h\" , HueAdjustments . longer ) // disable the default alpha adjustment componentAdjustment ( \"alpha\" ) { it } // ... }","title":"Hue adjustment"},{"location":"usage/#chromatic-adaptation","text":"When converting between color spaces that use different white points, the color is automatically adapted using Von Kries\u2019 method with the CIECAM02 CAT matrix. If you\u2019d like to perform chromatic adaptation using a different matrix (such as Bradford\u2019s), you can convert the color to XYZ and use adaptTo . val bradfords = floatArrayOf ( 0.8951f , 0.2664f , - 0.1614f , - 0.7502f , 1.7135f , 0.0367f , 0.0389f , - 0.0685f , 1.0296f , ) // adapt this color to LAB with a D50 whitepoint using bradford's matrix RGB ( \"#f3a\" ). toXYZ (). adaptTo ( XYZ50 , bradfords ). toLAB () // LAB50(l=59.029217, a=79.97541, b=-14.047905) If you want to adapt multiple colors at once based on a source white color, you can use createChromaticAdapter . val sourceWhite : Color = bitmap . getWhitestPixel () val adapter = RGBInt . createChromaticAdapter ( sourceWhite ) val pixels : IntArray = bitmap . getArgbPixels () adapter . adaptAll ( pixels ) bitmap . setPixels ( pixels )","title":"Chromatic adaptation"},{"location":"usage/#parsing-color-strings","text":"You can create a Color instance from any CSS color string using parse and parseOrNull . Color . parse ( \"red\" ) // RGB(r=1.0, g=0.0, b=0.0) Color . parse ( \"rgb(51 102 51 / 40%)\" ) // RGB(r=0.2, g=0.4, b=0.2, alpha=0.4) Color . parse ( \"hwb(200grad 20% 45%)\" ) // HWB(h=180.0, w=0.2, b=0.45)","title":"Parsing color strings"},{"location":"usage/#rendering-colors-as-strings","text":"You can also render any Color as a CSS color string with formatCssString . Colormath supports more color spaces than CSS, so formatting formatCssString will produce a color() style string with a dashed identifier name based on the color space. You can also use formatCssStringOrNull which will return null when called on a color space that isn\u2019t built in to CSS. To render a color as a hex string, convert it to sRGB and use toHex . RGB (. 2 , 0 , 1 , alpha = . 5 ). formatCssString () // \"rgb(51 0 255 / 0.5)\" LCHab50 ( 50 , 10 , 180 ). formatCssString () // \"lch(50% 10 180)\" ROMM_RGB (. 1 , . 2 , . 4 ). formatCssString () // \"color(prophoto-rgb 0.1 0.2 0.4)\" RGB (. 2 , . 4 , . 6 ). toHex () // \"#336699\" Caution The CSS lab , lch , and xyz functions specify colors with the D50 illuminant. Colormath\u2019s default constructors for those color spaces use D65 , so they will be subject to chromatic adaptation before rendering. To avoid this, use the D50 versions of the constructors: LAB50 , LCHab50 , and XYZ50","title":"Rendering colors as strings"}]}