{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Colormath \u00b6 Colormath is a Kotlin Multiplatform library that allows you to convert between a number of color spaces. Colormath can also parse and render CSS colors. Supported color spaces \u00b6 RGB CMYK HSL HSV HWB LAB LCH LUV XYZ ANSI-16 color codes ANSI-256 color codes Usage \u00b6 Conversion \u00b6 Each color space is represented with a data class, and contains .toXXX() methods to convert to other spaces. All color classes contain an alpha channel, which defaults to 1 (fully opaque) for color spaces that don\u2019t support transparency (such as ANSI color codes). > RGB ( \"#adcdef\" ). toHSV () HSV ( h = 211 , s = 28 , v = 94 ) > RGB ( r = 12 , g = 128 , b = 255 , a =. 5f ). toCMYK () CMYK ( c = 95 , m = 50 , y = 0 , k = 0 , a =. 5f ) > HSL ( 180 , 50 , 50 ). toHex () \"#40bfbf\" CSS Parsing and rendering \u00b6 You can parse any color allowed by the CSS Color Module Levels 1 through 4. > Color . fromCss ( \"#ff009980\" ) RGB ( r = 255 , g = 0 , b = 153 , a =. 5 ) > Color . fromCss ( \"rgb(100%, 0%, 60%)\" ) RGB ( r = 255 , g = 0 , b = 153 , a = 1 ) > Color . fromCss ( \"rgb(1e2, .5e1, .5e0, +.25e2%)\" ) RGB ( r = 100 , g = 5 , b = 1 , a =. 25 ) > Color . fromCss ( \"hsl(.75turn, 60%, 70%)\" ) HSL ( h = 270 , s = 60 , l = 70 , a = 1 ) > Color . fromCss ( \"rebeccapurple\" ). toHex () \"#663399\" You can also render any color in CSS rgb or hsl functional or whitespace notation > RGB ( 255 , 0 , 128 ). toCssRgb () \"rgb(255, 0, 128)\" > RGB ( 255 , 0 , 128 , . 5f ). toCssRgb ( rgbStyle = PERCENT ) \"rgb(100%, 0%, 50%, .5)\" > XYZ ( 25.0 , 50.0 , 75.0 , . 5f ). toCssHsl ( commas = false , hueUnit = RADIANS ) \"hsl(3.1241rad 100% 44% / .5)\" Installation \u00b6 Colormath is distributed through Maven Central . dependencies { implementation ( \"com.github.ajalt.colormath:colormath:2.1.0\" ) } If you\u2019re using Maven instead of Gradle, use <artifactId>colormath-jvm</artifactId> \u00b6 In version 2.0, the maven coordinates changed. Make sure you\u2019re using the new coordinates if you\u2019re updating from an older version. \u00b6 Multiplatform \u00b6 Colormath supports the following targets: jvm , mingwX64 , linuxX64 , macosX64 , ios , watchos , tvos , and js (for both NodeJS and Browsers). You\u2019ll need to use Gradle 6 or newer. Snapshots \u00b6 Snapshot builds are also available You'll need to add the Sonatype snapshots repository: repositories { maven { url = uri ( \"https://oss.sonatype.org/content/repositories/snapshots/\" ) } }","title":"Getting Started"},{"location":"#colormath","text":"Colormath is a Kotlin Multiplatform library that allows you to convert between a number of color spaces. Colormath can also parse and render CSS colors.","title":"Colormath"},{"location":"#supported-color-spaces","text":"RGB CMYK HSL HSV HWB LAB LCH LUV XYZ ANSI-16 color codes ANSI-256 color codes","title":"Supported color spaces"},{"location":"#usage","text":"","title":"Usage"},{"location":"#conversion","text":"Each color space is represented with a data class, and contains .toXXX() methods to convert to other spaces. All color classes contain an alpha channel, which defaults to 1 (fully opaque) for color spaces that don\u2019t support transparency (such as ANSI color codes). > RGB ( \"#adcdef\" ). toHSV () HSV ( h = 211 , s = 28 , v = 94 ) > RGB ( r = 12 , g = 128 , b = 255 , a =. 5f ). toCMYK () CMYK ( c = 95 , m = 50 , y = 0 , k = 0 , a =. 5f ) > HSL ( 180 , 50 , 50 ). toHex () \"#40bfbf\"","title":"Conversion"},{"location":"#css-parsing-and-rendering","text":"You can parse any color allowed by the CSS Color Module Levels 1 through 4. > Color . fromCss ( \"#ff009980\" ) RGB ( r = 255 , g = 0 , b = 153 , a =. 5 ) > Color . fromCss ( \"rgb(100%, 0%, 60%)\" ) RGB ( r = 255 , g = 0 , b = 153 , a = 1 ) > Color . fromCss ( \"rgb(1e2, .5e1, .5e0, +.25e2%)\" ) RGB ( r = 100 , g = 5 , b = 1 , a =. 25 ) > Color . fromCss ( \"hsl(.75turn, 60%, 70%)\" ) HSL ( h = 270 , s = 60 , l = 70 , a = 1 ) > Color . fromCss ( \"rebeccapurple\" ). toHex () \"#663399\" You can also render any color in CSS rgb or hsl functional or whitespace notation > RGB ( 255 , 0 , 128 ). toCssRgb () \"rgb(255, 0, 128)\" > RGB ( 255 , 0 , 128 , . 5f ). toCssRgb ( rgbStyle = PERCENT ) \"rgb(100%, 0%, 50%, .5)\" > XYZ ( 25.0 , 50.0 , 75.0 , . 5f ). toCssHsl ( commas = false , hueUnit = RADIANS ) \"hsl(3.1241rad 100% 44% / .5)\"","title":"CSS Parsing and rendering"},{"location":"#installation","text":"Colormath is distributed through Maven Central . dependencies { implementation ( \"com.github.ajalt.colormath:colormath:2.1.0\" ) }","title":"Installation"},{"location":"#if-youre-using-maven-instead-of-gradle-use-artifactidcolormath-jvmartifactid","text":"","title":"If you're using Maven instead of Gradle, use &lt;artifactId&gt;colormath-jvm&lt;/artifactId&gt;"},{"location":"#in-version-20-the-maven-coordinates-changed-make-sure-youre-using-the-new-coordinates-if-youre-updating-from-an-older-version","text":"","title":"In version 2.0, the maven coordinates changed. Make sure you're using the new coordinates if you're updating from an older version."},{"location":"#multiplatform","text":"Colormath supports the following targets: jvm , mingwX64 , linuxX64 , macosX64 , ios , watchos , tvos , and js (for both NodeJS and Browsers). You\u2019ll need to use Gradle 6 or newer.","title":"Multiplatform"},{"location":"#snapshots","text":"Snapshot builds are also available You'll need to add the Sonatype snapshots repository: repositories { maven { url = uri ( \"https://oss.sonatype.org/content/repositories/snapshots/\" ) } }","title":"Snapshots"},{"location":"changelog/","text":"[2.1.0] - 2021-05-05 \u00b6 Added \u00b6 Added CIE LUV colorspace support Added CIE LCH(uv) colorspace support Added HWB colorspace support Added lab() and hwb() support to Color.fromCss JS target now publishes IR format in addition to legacy jars Changed \u00b6 Updated Kotlin to 1.5.0 Color.fromCss now clamps out-of-range values in accordance with the CSS Color Module Level 4 spec [2.0.0] - 2020-09-12 \u00b6 Added \u00b6 Added multiplatform support. Changed \u00b6 Moved maven coordinates to com.github.ajalt.colormath:colormath:2.0.0 . Deprecated \u00b6 Renamed ConvertibleColor to Color . The old name is left as a deprecated type alias. [1.4.1] - 2020-05-12 \u00b6 Fixed \u00b6 Fix RGB(255,255, 255).toLAB() throwing an exception due to rounding precision. [1.4.0] - 2019-12-22 \u00b6 Added \u00b6 hueAsRad() , hueAsGrad() , and hueAsTurns() extensions for HSL and HSV classes. toHex() now has a renderAlpha parameter that lets you render the color\u2019s alpha channel in the hex. By default the alpha will be added if it\u2019s < 1. toCssRgb() and toCssHsl() extensions to render colors as CSS color functions RGB.toPackedInt() to convert a color to a single integer. Changed \u00b6 withNumberSign parameter of toHex now defaults to true ColorMath.parseCssColor() renamed to ConvertableColor.fromCss() and ColorMath.cssKeywordColors to CssColors.colorsByName [1.3.0] - 2019-12-19 \u00b6 Added \u00b6 All colors now have an alpha channel, defaulting to 1 (fully opaque). For colorspaces that support transparency, you can pass an alpha value into their constructors. ColorMath.parseCssColor() can parse all valid HTML/CSS colors, including rgb, hsl, and named colors. ColorMath.cssKeywordColors is a map of HTML/CSS color names to RGB the colors they represent. Changed \u00b6 Switch rounding methods to use kotlin.math rounding, which can slightly change conversion results in some cases. [1.2.0] - 2018-08-19 \u00b6 Added \u00b6 Add ability to construct RGB instances from packed integers or Bytes","title":"Releases"},{"location":"changelog/#210-2021-05-05","text":"","title":"[2.1.0] - 2021-05-05"},{"location":"changelog/#added","text":"Added CIE LUV colorspace support Added CIE LCH(uv) colorspace support Added HWB colorspace support Added lab() and hwb() support to Color.fromCss JS target now publishes IR format in addition to legacy jars","title":"Added"},{"location":"changelog/#changed","text":"Updated Kotlin to 1.5.0 Color.fromCss now clamps out-of-range values in accordance with the CSS Color Module Level 4 spec","title":"Changed"},{"location":"changelog/#200-2020-09-12","text":"","title":"[2.0.0] - 2020-09-12"},{"location":"changelog/#added_1","text":"Added multiplatform support.","title":"Added"},{"location":"changelog/#changed_1","text":"Moved maven coordinates to com.github.ajalt.colormath:colormath:2.0.0 .","title":"Changed"},{"location":"changelog/#deprecated","text":"Renamed ConvertibleColor to Color . The old name is left as a deprecated type alias.","title":"Deprecated"},{"location":"changelog/#141-2020-05-12","text":"","title":"[1.4.1] - 2020-05-12"},{"location":"changelog/#fixed","text":"Fix RGB(255,255, 255).toLAB() throwing an exception due to rounding precision.","title":"Fixed"},{"location":"changelog/#140-2019-12-22","text":"","title":"[1.4.0] - 2019-12-22"},{"location":"changelog/#added_2","text":"hueAsRad() , hueAsGrad() , and hueAsTurns() extensions for HSL and HSV classes. toHex() now has a renderAlpha parameter that lets you render the color\u2019s alpha channel in the hex. By default the alpha will be added if it\u2019s < 1. toCssRgb() and toCssHsl() extensions to render colors as CSS color functions RGB.toPackedInt() to convert a color to a single integer.","title":"Added"},{"location":"changelog/#changed_2","text":"withNumberSign parameter of toHex now defaults to true ColorMath.parseCssColor() renamed to ConvertableColor.fromCss() and ColorMath.cssKeywordColors to CssColors.colorsByName","title":"Changed"},{"location":"changelog/#130-2019-12-19","text":"","title":"[1.3.0] - 2019-12-19"},{"location":"changelog/#added_3","text":"All colors now have an alpha channel, defaulting to 1 (fully opaque). For colorspaces that support transparency, you can pass an alpha value into their constructors. ColorMath.parseCssColor() can parse all valid HTML/CSS colors, including rgb, hsl, and named colors. ColorMath.cssKeywordColors is a map of HTML/CSS color names to RGB the colors they represent.","title":"Added"},{"location":"changelog/#changed_3","text":"Switch rounding methods to use kotlin.math rounding, which can slightly change conversion results in some cases.","title":"Changed"},{"location":"changelog/#120-2018-08-19","text":"","title":"[1.2.0] - 2018-08-19"},{"location":"changelog/#added_4","text":"Add ability to construct RGB instances from packed integers or Bytes","title":"Added"},{"location":"tryit/","text":"Color Converter \u00b6 Pick a color or enter a value below and it will be automatically converted all other color spaces.","title":"Try It Online"},{"location":"tryit/#color-converter","text":"Pick a color or enter a value below and it will be automatically converted all other color spaces.","title":"Color Converter"}]}